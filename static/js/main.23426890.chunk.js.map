{"version":3,"sources":["utils.js","SnakeBoard.js","Points.js","LeaderBoard.js","App.js","index.js"],"names":["range","number","Array","Math","round","keys","SnakeBoard","points","setPoints","useState","parseInt","localStorage","getItem","height","setHeight","width","setWidth","getInitialRows","initialRows","i","j","getObstacles","name","location","map","y","x","ceil","randomObstacle","floor","random","length","randomPosition","position","obstacle","some","setObstacle","rows","setRows","snake","setSnake","direction","setDirection","food","setFood","intervalId","setIntervalId","isGameOver","setIsGameOver","startGame","setStartGame","error","setError","useEffect","document","addEventListener","e","keyCode","displayRows","row","className","tile","checkGameOver","head","hitSnake","slice","find","b","hitWall","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","newSnake","push","pointsList","JSON","parse","prompt","setItem","stringify","window","dispatchEvent","Event","forEach","madonPaa","pop","newRows","displaySnake","placeholder","type","onChange","size","target","value","console","log","onClick","Points","getSnakePoints","LeaderBoard","setPointsList","sortedPointsList","sort","a","App","reload","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.23426890.chunk.js","sourcesContent":["import {useEffect, useRef} from \"react\";\r\n/*\r\nJaetaan tämä pätkä oppilaille pastebiniin https://pastebin.com/\r\nThanks Dan Abramov for useInterval hook\r\nhttps://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\nThis useInterval Hook sets up an interval and clears it after unmounting.\r\nIt’s a combo of setInterval and clearInterval tied to the component lifecycle.\r\n*/\r\nexport const useInterval = (callback, delay, setIntervalId) => {\r\n  const savedCallback = useRef();\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      setIntervalId(id);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay, setIntervalId]);\r\n};\r\n\r\nexport const range = number => [...Array(Math.round(number)).keys()];\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {useInterval, range} from \"./utils\";\r\nimport \"./SnakeBoard.css\";\r\n\r\nconst SnakeBoard = ({points, setPoints}) => {\r\n  const [height, setHeight] = useState(\r\n    parseInt(localStorage.getItem(\"snake-board-size\")) || 15\r\n  );\r\n  const [width, setWidth] = useState(\r\n    parseInt(localStorage.getItem(\"snake-board-size\")) || 15\r\n  );\r\n  const getInitialRows = () => {\r\n    var initialRows = [];\r\n    for (var i = 0; i < height; i++) {\r\n      initialRows[i] = [];\r\n      for (var j = 0; j < width; j++) {\r\n        initialRows[i][j] = \"blank\";\r\n      }\r\n    }\r\n    return initialRows;\r\n  };\r\n\r\n  const getObstacles = () => [\r\n    {name: \"tyhjä\", location: []},\r\n    {\r\n      name: \"keski\",\r\n      location: range(width * 0.6).map(y => ({\r\n        x: Math.round(height / 2),\r\n        y: y + Math.ceil(width * 0.2)\r\n      }))\r\n    },\r\n    {\r\n      name: \"reunat\",\r\n      location: [\r\n        ...range(width).map(x => ({x, y: 0})),\r\n        ...range(width).map(x => ({x, y: width - 1})),\r\n        ...range(height).map(y => ({x: 0, y})),\r\n        ...range(height).map(y => ({x: height - 1, y}))\r\n      ]\r\n    },\r\n    {\r\n      name: \"oma\",\r\n      location: [\r\n        {x: 2, y: 5},\r\n        {x: 2, y: 4},\r\n        {x: 2, y: 3},\r\n        {x: 3, y: 3},\r\n        {x: 4, y: 3}\r\n      ]\r\n    }\r\n  ];\r\n\r\n  const randomObstacle = () =>\r\n    getObstacles()[Math.floor(Math.random() * getObstacles().length)];\r\n\r\n  const randomPosition = () => {\r\n    const position = {\r\n      x: Math.floor(Math.random() * width),\r\n      y: Math.floor(Math.random() * height)\r\n    };\r\n    if (\r\n      obstacle.location.some(({x, y}) => position.x === x && position.y === y)\r\n    ) {\r\n      return randomPosition();\r\n    }\r\n    return position;\r\n  };\r\n\r\n  const [obstacle, setObstacle] = useState(randomObstacle);\r\n  const [rows, setRows] = useState(getInitialRows());\r\n  const [snake, setSnake] = useState([{x: 1, y: 1}]);\r\n  const [direction, setDirection] = useState(\"right\");\r\n  const [food, setFood] = useState(randomPosition());\r\n  const [intervalId, setIntervalId] = useState();\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [startGame, setStartGame] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (width >= 10 && width <= 100 && height >= 10 && height <= 100) {\r\n      setObstacle(randomObstacle());\r\n      setRows(getInitialRows());\r\n      setFood(randomPosition());\r\n    }\r\n  }, [width, height]);\r\n\r\n  const changeDirectionWithKeys = e => {\r\n    const {keyCode} = e;\r\n    switch (keyCode) {\r\n      case 37:\r\n        setDirection(\"left\");\r\n        break;\r\n      case 38:\r\n        setDirection(\"top\");\r\n        break;\r\n      case 39:\r\n        setDirection(\"right\");\r\n        break;\r\n      case 40:\r\n        setDirection(\"bottom\");\r\n        break;\r\n    }\r\n  };\r\n  document.addEventListener(\"keydown\", changeDirectionWithKeys);\r\n  const displayRows = rows.map((row, i) => (\r\n    <div className=\"Snake-row\" key={i}>\r\n      {row.map((tile, j) => (\r\n        <div className={`tile ${tile}`} key={j} />\r\n      ))}\r\n    </div>\r\n  ));\r\n\r\n  const displaySnake = () => {\r\n    const newRows = getInitialRows();\r\n    snake.forEach(tile => {\r\n      newRows[tile.x][tile.y] = \"snake\";\r\n    });\r\n    newRows[food.x][food.y] = \"food\";\r\n    obstacle.location.forEach(tile => {\r\n      newRows[tile.x][tile.y] = \"obstacle\";\r\n    });\r\n    setRows(newRows);\r\n  };\r\n\r\n  const checkGameOver = () => {\r\n    const head = snake[0];\r\n    const body = snake.slice(1, -1);\r\n    const hitSnake = body.find(b => b.x === head.x && b.y === head.y);\r\n    const hitWall = obstacle.location.some(\r\n      ({x, y}) => head.x === x && head.y === y\r\n    );\r\n    return hitSnake || hitWall;\r\n  };\r\n\r\n  const moveSnake = () => {\r\n    const newSnake = [];\r\n    switch (direction) {\r\n      case \"right\":\r\n        newSnake.push({x: snake[0].x, y: (snake[0].y + 1) % width});\r\n        break;\r\n      case \"left\":\r\n        newSnake.push({x: snake[0].x, y: (snake[0].y - 1 + width) % width});\r\n        break;\r\n      case \"top\":\r\n        newSnake.push({x: (snake[0].x - 1 + height) % height, y: snake[0].y});\r\n        break;\r\n      case \"bottom\":\r\n        newSnake.push({x: (snake[0].x + 1) % height, y: snake[0].y});\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (checkGameOver()) {\r\n      setIsGameOver(true);\r\n      clearInterval(intervalId);\r\n      const pointsList = JSON.parse(localStorage.getItem(\"snake-points\")) || [];\r\n      const name = prompt(\"Game ended. What's your name:\");\r\n      pointsList.push({name, points});\r\n      localStorage.setItem(\"snake-points\", JSON.stringify(pointsList));\r\n      window.dispatchEvent(new Event(\"storage\"));\r\n    }\r\n\r\n    if (checkGameOver()) {\r\n      setIsGameOver(true);\r\n    }\r\n\r\n    snake.forEach(tile => {\r\n      newSnake.push(tile);\r\n    });\r\n\r\n    const madonPaa = snake[0];\r\n    if (madonPaa.x === food.x && madonPaa.y === food.y) {\r\n      setFood(randomPosition);\r\n      setPoints(points + 1);\r\n    } else {\r\n      newSnake.pop();\r\n    }\r\n\r\n    setSnake(newSnake);\r\n    displaySnake();\r\n  };\r\n\r\n  useInterval(moveSnake, 150, setIntervalId);\r\n\r\n  return (\r\n    <div className=\"Snake-board\">\r\n      {!startGame && (\r\n        <>\r\n          <div>The map is {width} tiles big</div>\r\n          <div>You can change map size here:</div>\r\n          <input\r\n            className=\"Board-size\"\r\n            placeholder=\"Size from 10-100\"\r\n            type=\"number\"\r\n            onChange={e => {\r\n              const size = parseInt(e.target.value);\r\n              if (size <= 100 && size >= 10) {\r\n                console.log(\"OK\", size);\r\n                setWidth(size);\r\n                setHeight(size);\r\n                localStorage.setItem(\"snake-board-size\", size);\r\n              } else {\r\n                console.error(\"bad\", size);\r\n                setError(`The board is too ${size > 100 ? \"big\" : \"small\"}`);\r\n              }\r\n            }}\r\n          />\r\n          {error && <div className=\"Error\">{error}</div>}\r\n          <button className=\"Start-game\" onClick={setStartGame}>\r\n            Start\r\n          </button>\r\n        </>\r\n      )}\r\n      {startGame && displayRows}\r\n      {isGameOver && <div className=\"Game-over\">Game over!</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SnakeBoard;\r\n","import React from \"react\";\r\n\r\nconst Points = ({points}) => {\r\n  return <div className=\"Points\">{points} pistettä</div>;\r\n};\r\n\r\nexport default Points;\r\n","import React, {useState} from \"react\";\r\nimport \"./LeaderBoard.css\";\r\n\r\nconst getSnakePoints = () =>\r\n  JSON.parse(localStorage.getItem(\"snake-points\")) || [];\r\n\r\nconst LeaderBoard = () => {\r\n  const [pointsList, setPointsList] = useState(getSnakePoints());\r\n\r\n  window.addEventListener(\"storage\", () => {\r\n    setPointsList(getSnakePoints());\r\n  });\r\n\r\n  const sortedPointsList = pointsList.sort((a, b) => b.points - a.points);\r\n\r\n  return (\r\n    <div className=\"LeaderBoard\">\r\n      <div className=\"LeaderBoard-header\">Top 5</div>\r\n      <div className=\"LeaderBoard-points\">\r\n        {sortedPointsList.slice(0, 5).map((points, i) => (\r\n          <div key={`${points.points}-${i}`}>\r\n            {points.name} {points.points}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeaderBoard;\r\n","import React, {useState} from \"react\";\r\nimport \"./App.css\";\r\nimport SnakeBoard from \"./SnakeBoard\";\r\nimport Points from \"./Points\";\r\nimport LeaderBoard from \"./LeaderBoard\";\r\n\r\nfunction App() {\r\n  const [points, setPoints] = useState(0);\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">Matopeli</header>\r\n      <Points points={points} />\r\n      <SnakeBoard points={points} setPoints={setPoints} />\r\n      <button onClick={() => window.location.reload()}>New Game</button>\r\n      <LeaderBoard />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}