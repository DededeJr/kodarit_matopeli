{"version":3,"sources":["SnakeBoard.js","utils.js","Points.js","LeaderBoard.js","App.js","index.js"],"names":["SnakeBoard","points","setPoints","initialRows","i","j","randomPosition","x","Math","floor","random","y","useState","rows","setRows","snake","setSnake","direction","setDirection","food","setFood","intervalId","isGameOver","setIsGameOver","document","addEventListener","e","keyCode","displayRows","map","row","className","tile","checkGameOver","head","slice","find","b","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","newSnake","push","pointsList","JSON","parse","localStorage","getItem","setItem","stringify","window","dispatchEvent","Event","forEach","madonPaa","pop","newRows","displaySnake","Points","getSnakePoints","LeaderBoard","setPointsList","sortedPointsList","sort","a","App","onClick","location","reload","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5f246678.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {useInterval} from \"./utils\";\r\nimport \"./SnakeBoard.css\";\r\n\r\nconst SnakeBoard = ({points, setPoints}) => {\r\n  const height = 15;\r\n  const width = 15;\r\n  var initialRows = [];\r\n  for (var i = 0; i < height; i++) {\r\n    initialRows[i] = [];\r\n    for (var j = 0; j < width; j++) {\r\n      initialRows[i][j] = \"blank\";\r\n    }\r\n  }\r\n\r\n  const randomPosition = () => {\r\n    const position = {\r\n      x: Math.floor(Math.random() * width),\r\n      y: Math.floor(Math.random() * height)\r\n    };\r\n    return position;\r\n  };\r\n\r\n  const [rows, setRows] = useState(initialRows);\r\n  const [snake, setSnake] = useState([{x: 2, y: 5}]);\r\n  const [direction, setDirection] = useState(\"right\");\r\n  const [food, setFood] = useState(randomPosition);\r\n  const [intervalId, setIntervalId] = useState();\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n\r\n  const changeDirectionWithKeys = e => {\r\n    const {keyCode} = e;\r\n    switch (keyCode) {\r\n      case 37:\r\n        setDirection(\"left\");\r\n        break;\r\n      case 38:\r\n        setDirection(\"top\");\r\n        break;\r\n      case 39:\r\n        setDirection(\"right\");\r\n        break;\r\n      case 40:\r\n        setDirection(\"bottom\");\r\n        break;\r\n    }\r\n  };\r\n  document.addEventListener(\"keydown\", changeDirectionWithKeys);\r\n  const displayRows = rows.map((row, i) => (\r\n    <div className=\"Snake-row\" key={i}>\r\n      {row.map((tile, j) => (\r\n        <div className={`tile ${tile}`} key={j} />\r\n      ))}\r\n    </div>\r\n  ));\r\n\r\n  const displaySnake = () => {\r\n    const newRows = initialRows;\r\n    snake.forEach(tile => {\r\n      newRows[tile.x][tile.y] = \"snake\";\r\n    });\r\n    newRows[food.x][food.y] = \"food\";\r\n    setRows(newRows);\r\n  };\r\n\r\n  const checkGameOver = () => {\r\n    const head = snake[0];\r\n    const body = snake.slice(1, -1);\r\n    return body.find(b => b.x === head.x && b.y === head.y);\r\n  };\r\n\r\n  const moveSnake = () => {\r\n    const newSnake = [];\r\n    switch (direction) {\r\n      case \"right\":\r\n        newSnake.push({x: snake[0].x, y: (snake[0].y + 1) % width});\r\n        break;\r\n      case \"left\":\r\n        newSnake.push({x: snake[0].x, y: (snake[0].y - 1 + width) % width});\r\n        break;\r\n      case \"top\":\r\n        newSnake.push({x: (snake[0].x - 1 + height) % height, y: snake[0].y});\r\n        break;\r\n      case \"bottom\":\r\n        newSnake.push({x: (snake[0].x + 1) % height, y: snake[0].y});\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (checkGameOver()) {\r\n      setIsGameOver(true);\r\n      clearInterval(intervalId);\r\n      const pointsList = JSON.parse(localStorage.getItem(\"snake-points\")) || [];\r\n      pointsList.push(points);\r\n      localStorage.setItem(\"snake-points\", JSON.stringify(pointsList));\r\n      window.dispatchEvent(new Event(\"storage\"));\r\n    }\r\n\r\n    if (checkGameOver()) {\r\n      setIsGameOver(true);\r\n    }\r\n\r\n    snake.forEach(tile => {\r\n      newSnake.push(tile);\r\n    });\r\n\r\n    const madonPaa = snake[0];\r\n    if (madonPaa.x === food.x && madonPaa.y === food.y) {\r\n      setFood(randomPosition);\r\n      setPoints(points + 1);\r\n    } else {\r\n      newSnake.pop();\r\n    }\r\n\r\n    setSnake(newSnake);\r\n    displaySnake();\r\n  };\r\n\r\n  useInterval(moveSnake, 150, setIntervalId);\r\n\r\n  return (\r\n    <div className=\"Snake-board\">\r\n      {displayRows}\r\n      {isGameOver && <div className=\"Game-over\">Game over!</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SnakeBoard;\r\n","import {useEffect, useRef} from \"react\";\r\n/*\r\nJaetaan tämä pätkä oppilaille pastebiniin https://pastebin.com/\r\nThanks Dan Abramov for useInterval hook\r\nhttps://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\nThis useInterval Hook sets up an interval and clears it after unmounting.\r\nIt’s a combo of setInterval and clearInterval tied to the component lifecycle.\r\n*/\r\nexport const useInterval = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      setInterval(id);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay, setInterval]);\r\n};\r\n","import React from \"react\";\r\n\r\nconst Points = ({points}) => {\r\n  return <div className=\"Points\">{points} pistettä</div>;\r\n};\r\n\r\nexport default Points;\r\n","import React, {useState} from \"react\";\r\nimport \"./LeaderBoard.css\";\r\n\r\nconst getSnakePoints = () =>\r\n  JSON.parse(localStorage.getItem(\"snake-points\")) || [];\r\n\r\nconst LeaderBoard = () => {\r\n  const [pointsList, setPointsList] = useState(getSnakePoints());\r\n\r\n  window.addEventListener(\"storage\", () => {\r\n    setPointsList(getSnakePoints());\r\n  });\r\n\r\n  const sortedPointsList = pointsList.sort((a, b) => b - a);\r\n\r\n  return (\r\n    <div className=\"LeaderBoard\">\r\n      <div className=\"LeaderBoard-header\">Top 5</div>\r\n      <div className=\"LeaderBoard-points\">\r\n        {sortedPointsList.slice(0, 5).map((points, i) => (\r\n          <div key={`${points}-${i}`}>{points} Pistettä</div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeaderBoard;\r\n","import React, {useState} from \"react\";\r\nimport \"./App.css\";\r\nimport SnakeBoard from \"./SnakeBoard\";\r\nimport Points from \"./Points\";\r\nimport LeaderBoard from \"./LeaderBoard\";\r\n\r\nfunction App() {\r\n  const [points, setPoints] = useState(0);\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">Matopeli</header>\r\n      <Points points={points} />\r\n      <SnakeBoard points={points} setPoints={setPoints} />\r\n      <button onClick={() => window.location.reload()}>New Game</button>\r\n      <LeaderBoard />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}