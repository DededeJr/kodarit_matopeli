[{"C:\\Users\\mirov\\kodarit_matopeli\\src\\index.js":"1","C:\\Users\\mirov\\kodarit_matopeli\\src\\App.js":"2","C:\\Users\\mirov\\kodarit_matopeli\\src\\SnakeBoard.js":"3","C:\\Users\\mirov\\kodarit_matopeli\\src\\utils.js":"4","C:\\Users\\mirov\\kodarit_matopeli\\src\\Points.js":"5","C:\\Users\\mirov\\kodarit_matopeli\\src\\LeaderBoard.js":"6"},{"size":447,"mtime":1615907905524,"results":"7","hashOfConfig":"8"},{"size":569,"mtime":1618324371336,"results":"9","hashOfConfig":"8"},{"size":3423,"mtime":1618325811521,"results":"10","hashOfConfig":"8"},{"size":873,"mtime":1617115811026,"results":"11","hashOfConfig":"8"},{"size":152,"mtime":1617720639768,"results":"12","hashOfConfig":"8"},{"size":767,"mtime":1618326631937,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"18ax4v9",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\mirov\\kodarit_matopeli\\src\\index.js",[],["29","30"],"C:\\Users\\mirov\\kodarit_matopeli\\src\\App.js",[],"C:\\Users\\mirov\\kodarit_matopeli\\src\\SnakeBoard.js",["31"],"import React, {useState} from \"react\";\r\nimport {useInterval} from \"./utils\";\r\nimport \"./SnakeBoard.css\";\r\n\r\nconst SnakeBoard = ({points, setPoints}) => {\r\n  const height = 15;\r\n  const width = 15;\r\n  var initialRows = [];\r\n  for (var i = 0; i < height; i++) {\r\n    initialRows[i] = [];\r\n    for (var j = 0; j < width; j++) {\r\n      initialRows[i][j] = \"blank\";\r\n    }\r\n  }\r\n\r\n  const randomPosition = () => {\r\n    const position = {\r\n      x: Math.floor(Math.random() * width),\r\n      y: Math.floor(Math.random() * height)\r\n    };\r\n    return position;\r\n  };\r\n\r\n  const [rows, setRows] = useState(initialRows);\r\n  const [snake, setSnake] = useState([{x: 2, y: 5}]);\r\n  const [direction, setDirection] = useState(\"right\");\r\n  const [food, setFood] = useState(randomPosition);\r\n  const [intervalId, setIntervalId] = useState();\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n\r\n  const changeDirectionWithKeys = e => {\r\n    const {keyCode} = e;\r\n    switch (keyCode) {\r\n      case 37:\r\n        setDirection(\"left\");\r\n        break;\r\n      case 38:\r\n        setDirection(\"top\");\r\n        break;\r\n      case 39:\r\n        setDirection(\"right\");\r\n        break;\r\n      case 40:\r\n        setDirection(\"bottom\");\r\n        break;\r\n    }\r\n  };\r\n  document.addEventListener(\"keydown\", changeDirectionWithKeys);\r\n  const displayRows = rows.map((row, i) => (\r\n    <div className=\"Snake-row\" key={i}>\r\n      {row.map((tile, j) => (\r\n        <div className={`tile ${tile}`} key={j} />\r\n      ))}\r\n    </div>\r\n  ));\r\n\r\n  const displaySnake = () => {\r\n    const newRows = initialRows;\r\n    snake.forEach(tile => {\r\n      newRows[tile.x][tile.y] = \"snake\";\r\n    });\r\n    newRows[food.x][food.y] = \"food\";\r\n    setRows(newRows);\r\n  };\r\n\r\n  const checkGameOver = () => {\r\n    const head = snake[0];\r\n    const body = snake.slice(1, -1);\r\n    return body.find(b => b.x === head.x && b.y === head.y);\r\n  };\r\n\r\n  const moveSnake = () => {\r\n    const newSnake = [];\r\n    switch (direction) {\r\n      case \"right\":\r\n        newSnake.push({x: snake[0].x, y: (snake[0].y + 1) % width});\r\n        break;\r\n      case \"left\":\r\n        newSnake.push({x: snake[0].x, y: (snake[0].y - 1 + width) % width});\r\n        break;\r\n      case \"top\":\r\n        newSnake.push({x: (snake[0].x - 1 + height) % height, y: snake[0].y});\r\n        break;\r\n      case \"bottom\":\r\n        newSnake.push({x: (snake[0].x + 1) % height, y: snake[0].y});\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (checkGameOver()) {\r\n      setIsGameOver(true);\r\n      clearInterval(intervalId);\r\n      const pointsList = JSON.parse(localStorage.getItem(\"snake-points\")) || [];\r\n      pointsList.push(points);\r\n      localStorage.setItem(\"snake-points\", JSON.stringify(pointsList));\r\n      window.dispatchEvent(new Event(\"storage\"));\r\n    }\r\n\r\n    if (checkGameOver()) {\r\n      setIsGameOver(true);\r\n    }\r\n\r\n    snake.forEach(tile => {\r\n      newSnake.push(tile);\r\n    });\r\n\r\n    const madonPaa = snake[0];\r\n    if (madonPaa.x === food.x && madonPaa.y === food.y) {\r\n      setFood(randomPosition);\r\n      setPoints(points + 1);\r\n    } else {\r\n      newSnake.pop();\r\n    }\r\n\r\n    setSnake(newSnake);\r\n    displaySnake();\r\n  };\r\n\r\n  useInterval(moveSnake, 150, setIntervalId);\r\n\r\n  return (\r\n    <div className=\"Snake-board\">\r\n      {displayRows}\r\n      {isGameOver && <div className=\"Game-over\">Game over!</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SnakeBoard;\r\n","C:\\Users\\mirov\\kodarit_matopeli\\src\\utils.js",["32"],"import {useEffect, useRef} from \"react\";\r\n/*\r\nJaetaan tämä pätkä oppilaille pastebiniin https://pastebin.com/\r\nThanks Dan Abramov for useInterval hook\r\nhttps://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\nThis useInterval Hook sets up an interval and clears it after unmounting.\r\nIt’s a combo of setInterval and clearInterval tied to the component lifecycle.\r\n*/\r\nexport const useInterval = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      setInterval(id);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay, setInterval]);\r\n};\r\n","C:\\Users\\mirov\\kodarit_matopeli\\src\\Points.js",[],"C:\\Users\\mirov\\kodarit_matopeli\\src\\LeaderBoard.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":33,"column":5,"nodeType":"39","messageId":"40","endLine":46,"endColumn":6},{"ruleId":"41","severity":1,"message":"42","line":25,"column":6,"nodeType":"43","endLine":25,"endColumn":26,"suggestions":"44"},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'setInterval'. Either exclude it or remove the dependency array. Outer scope values like 'setInterval' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["47"],"no-global-assign","no-unsafe-negation",{"desc":"48","fix":"49"},"Update the dependencies array to be: [delay]",{"range":"50","text":"51"},[839,859],"[delay]"]