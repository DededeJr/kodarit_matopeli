[{"C:\\Users\\mirov\\kodarit_matopeli\\src\\index.js":"1","C:\\Users\\mirov\\kodarit_matopeli\\src\\App.js":"2","C:\\Users\\mirov\\kodarit_matopeli\\src\\SnakeBoard.js":"3","C:\\Users\\mirov\\kodarit_matopeli\\src\\utils.js":"4","C:\\Users\\mirov\\kodarit_matopeli\\src\\Points.js":"5","C:\\Users\\mirov\\kodarit_matopeli\\src\\LeaderBoard.js":"6"},{"size":447,"mtime":1615907905524,"results":"7","hashOfConfig":"8"},{"size":569,"mtime":1618324371336,"results":"9","hashOfConfig":"8"},{"size":6316,"mtime":1621350133319,"results":"10","hashOfConfig":"8"},{"size":965,"mtime":1620141239124,"results":"11","hashOfConfig":"8"},{"size":152,"mtime":1617720639768,"results":"12","hashOfConfig":"8"},{"size":825,"mtime":1619534660997,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"18ax4v9",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\mirov\\kodarit_matopeli\\src\\index.js",[],["28","29"],"C:\\Users\\mirov\\kodarit_matopeli\\src\\App.js",[],"C:\\Users\\mirov\\kodarit_matopeli\\src\\SnakeBoard.js",["30","31"],"import React, {useState, useEffect} from \"react\";\r\nimport {useInterval, range} from \"./utils\";\r\nimport \"./SnakeBoard.css\";\r\n\r\nconst SnakeBoard = ({points, setPoints}) => {\r\n  const [height, setHeight] = useState(\r\n    parseInt(localStorage.getItem(\"snake-board-size\")) || 15\r\n  );\r\n  const [width, setWidth] = useState(\r\n    parseInt(localStorage.getItem(\"snake-board-size\")) || 15\r\n  );\r\n  const getInitialRows = () => {\r\n    var initialRows = [];\r\n    for (var i = 0; i < height; i++) {\r\n      initialRows[i] = [];\r\n      for (var j = 0; j < width; j++) {\r\n        initialRows[i][j] = \"blank\";\r\n      }\r\n    }\r\n    return initialRows;\r\n  };\r\n\r\n  const getObstacles = () => [\r\n    {name: \"tyhjÃ¤\", location: []},\r\n    {\r\n      name: \"keski\",\r\n      location: range(width * 0.6).map(y => ({\r\n        x: Math.round(height / 2),\r\n        y: y + Math.ceil(width * 0.2)\r\n      }))\r\n    },\r\n    {\r\n      name: \"reunat\",\r\n      location: [\r\n        ...range(width).map(x => ({x, y: 0})),\r\n        ...range(width).map(x => ({x, y: width - 1})),\r\n        ...range(height).map(y => ({x: 0, y})),\r\n        ...range(height).map(y => ({x: height - 1, y}))\r\n      ]\r\n    },\r\n    {\r\n      name: \"oma\",\r\n      location: [\r\n        {x: 2, y: 5},\r\n        {x: 2, y: 4},\r\n        {x: 2, y: 3},\r\n        {x: 3, y: 3},\r\n        {x: 4, y: 3}\r\n      ]\r\n    }\r\n  ];\r\n\r\n  const randomObstacle = () =>\r\n    getObstacles()[Math.floor(Math.random() * getObstacles().length)];\r\n\r\n  const randomPosition = () => {\r\n    const position = {\r\n      x: Math.floor(Math.random() * width),\r\n      y: Math.floor(Math.random() * height)\r\n    };\r\n    if (\r\n      obstacle.location.some(({x, y}) => position.x === x && position.y === y)\r\n    ) {\r\n      return randomPosition();\r\n    }\r\n    return position;\r\n  };\r\n\r\n  const [obstacle, setObstacle] = useState(randomObstacle);\r\n  const [rows, setRows] = useState(getInitialRows());\r\n  const [snake, setSnake] = useState([{x: 1, y: 1}]);\r\n  const [direction, setDirection] = useState(\"right\");\r\n  const [food, setFood] = useState(randomPosition());\r\n  const [intervalId, setIntervalId] = useState();\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [startGame, setStartGame] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (width >= 10 && width <= 100 && height >= 10 && height <= 100) {\r\n      setObstacle(randomObstacle());\r\n      setRows(getInitialRows());\r\n      setFood(randomPosition());\r\n    }\r\n  }, [width, height]);\r\n\r\n  const changeDirectionWithKeys = e => {\r\n    const {keyCode} = e;\r\n    switch (keyCode) {\r\n      case 37:\r\n        setDirection(\"left\");\r\n        break;\r\n      case 38:\r\n        setDirection(\"top\");\r\n        break;\r\n      case 39:\r\n        setDirection(\"right\");\r\n        break;\r\n      case 40:\r\n        setDirection(\"bottom\");\r\n        break;\r\n    }\r\n  };\r\n  document.addEventListener(\"keydown\", changeDirectionWithKeys);\r\n  const displayRows = rows.map((row, i) => (\r\n    <div className=\"Snake-row\" key={i}>\r\n      {row.map((tile, j) => (\r\n        <div className={`tile ${tile}`} key={j} />\r\n      ))}\r\n    </div>\r\n  ));\r\n\r\n  const displaySnake = () => {\r\n    const newRows = getInitialRows();\r\n    snake.forEach(tile => {\r\n      newRows[tile.x][tile.y] = \"snake\";\r\n    });\r\n    newRows[food.x][food.y] = \"food\";\r\n    obstacle.location.forEach(tile => {\r\n      newRows[tile.x][tile.y] = \"obstacle\";\r\n    });\r\n    setRows(newRows);\r\n  };\r\n\r\n  const checkGameOver = () => {\r\n    const head = snake[0];\r\n    const body = snake.slice(1, -1);\r\n    const hitSnake = body.find(b => b.x === head.x && b.y === head.y);\r\n    const hitWall = obstacle.location.some(\r\n      ({x, y}) => head.x === x && head.y === y\r\n    );\r\n    return hitSnake || hitWall;\r\n  };\r\n\r\n  const moveSnake = () => {\r\n    const newSnake = [];\r\n    switch (direction) {\r\n      case \"right\":\r\n        newSnake.push({x: snake[0].x, y: (snake[0].y + 1) % width});\r\n        break;\r\n      case \"left\":\r\n        newSnake.push({x: snake[0].x, y: (snake[0].y - 1 + width) % width});\r\n        break;\r\n      case \"top\":\r\n        newSnake.push({x: (snake[0].x - 1 + height) % height, y: snake[0].y});\r\n        break;\r\n      case \"bottom\":\r\n        newSnake.push({x: (snake[0].x + 1) % height, y: snake[0].y});\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (checkGameOver()) {\r\n      setIsGameOver(true);\r\n      clearInterval(intervalId);\r\n      const pointsList = JSON.parse(localStorage.getItem(\"snake-points\")) || [];\r\n      const name = prompt(\"Game ended. What's your name:\");\r\n      pointsList.push({name, points});\r\n      localStorage.setItem(\"snake-points\", JSON.stringify(pointsList));\r\n      window.dispatchEvent(new Event(\"storage\"));\r\n    }\r\n\r\n    if (checkGameOver()) {\r\n      setIsGameOver(true);\r\n    }\r\n\r\n    snake.forEach(tile => {\r\n      newSnake.push(tile);\r\n    });\r\n\r\n    const madonPaa = snake[0];\r\n    if (madonPaa.x === food.x && madonPaa.y === food.y) {\r\n      setFood(randomPosition);\r\n      setPoints(points + 1);\r\n    } else {\r\n      newSnake.pop();\r\n    }\r\n\r\n    setSnake(newSnake);\r\n    displaySnake();\r\n  };\r\n\r\n  useInterval(moveSnake, 150, setIntervalId);\r\n\r\n  return (\r\n    <div className=\"Snake-board\">\r\n      {!startGame && (\r\n        <>\r\n          <div>The map is {width} tiles big</div>\r\n          <div>You can change map size here:</div>\r\n          <input\r\n            className=\"Board-size\"\r\n            placeholder=\"Size from 10-100\"\r\n            type=\"number\"\r\n            onChange={e => {\r\n              const size = parseInt(e.target.value);\r\n              if (size <= 100 && size >= 10) {\r\n                console.log(\"OK\", size);\r\n                setWidth(size);\r\n                setHeight(size);\r\n                localStorage.setItem(\"snake-board-size\", size);\r\n              } else {\r\n                console.error(\"bad\", size);\r\n                setError(`The board is too ${size > 100 ? \"big\" : \"small\"}`);\r\n              }\r\n            }}\r\n          />\r\n          {error && <div className=\"Error\">{error}</div>}\r\n          <button className=\"Start-game\" onClick={setStartGame}>\r\n            Start\r\n          </button>\r\n        </>\r\n      )}\r\n      {startGame && displayRows}\r\n      {isGameOver && <div className=\"Game-over\">Game over!</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SnakeBoard;\r\n","C:\\Users\\mirov\\kodarit_matopeli\\src\\utils.js",[],"C:\\Users\\mirov\\kodarit_matopeli\\src\\Points.js",[],"C:\\Users\\mirov\\kodarit_matopeli\\src\\LeaderBoard.js",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":85,"column":6,"nodeType":"38","endLine":85,"endColumn":21,"suggestions":"39"},{"ruleId":"40","severity":1,"message":"41","line":89,"column":5,"nodeType":"42","messageId":"43","endLine":102,"endColumn":6},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getInitialRows', 'randomObstacle', and 'randomPosition'. Either include them or remove the dependency array.","ArrayExpression",["46"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation",{"desc":"47","fix":"48"},"Update the dependencies array to be: [width, height, randomObstacle, getInitialRows, randomPosition]",{"range":"49","text":"50"},[2477,2492],"[width, height, randomObstacle, getInitialRows, randomPosition]"]